CIS 301. Logical Foundations of Programming.

Julie Thornton.

What is this class?
- logical reasoning (basics, puzzles)
- writing formal statements (propositional and predicate logic)
- proofs (why?)
- reasoning about code
    - analyzing what we know
    - identifying equivalent programs
    - simplifying programs
    - formally describing what programs do
- basics of proving correctness of programs (why?)


Syllabus

Canvas setup - weekly class material

Ed Discussion

How to take notes

Attendance/practice quizzes


///////////////////////////////////////////////////////

HW 0 - due Thursday, January 23
    --> see how to do it

HW 1 - due Tuesday, January 28

////////////////////////////////////////////////////////

Taking a step back...what is logic?

- analysis of an argument according to a set of rules
- given a set of premises (and sometimes a conclusion)


- a VALID conclusion is one that is always true
    anytime all the premises are true


Note that the premises might make no sense!


////////////////////////////////////////////////////////

Premise 1: If a person wears a red shirt,
    then they don't like pizza.

Premise 2: Fred is wearing a red shirt.

Conclusion: Fred doesn't like pizza.



--> Is this a valid argument? YES



(is there a hidden assumption we're making about Fred?)
assuming Fred is a person




////////////////////////////////////////////////////////

Logical Arguments with "OR"
    - can be ambiguous! Why?


I order fries or I order chips.



- in English, how do we interpret "or"? exclusive



- in programming? ||  inclusive




"Or" in THIS class: inclusive

If I mean exclusive: one or the other but not both



/////////////////////////////

Premise 1: I'll fold the laundry or I'll do the dishes.
Premise 2: I don't fold the laundry.

--> What can I conclude? 
I will do the dishes



//////////////////////////////////////////////////////////

num = 5;
if (num < 4 || x >= 10) {
    statement;
}



Suppose we know "statement" is executed
--> What can we conclude? num < 4 || x >= 10 is true

x >= 10 must have been true since num isn't less than 4





/////////////////////////////////////////////////////////

x = 9;
if (num < 4 || x >= 10) {
    if (num > 2) {
        statement;
    }
}



Suppose we know "statement" is executed
--> What can we conclude? 

num < 4 || x >= 10 is true
num > 2 is true

since x is 9, can't be >= 10. so num < 4

(assuming num is an int) num must be 3

////////////////////////////////////////////////////////

What rule are we seeing with an "or" statement,
where we know that one of the statements is NOT true?

the other one is




////////////////////////////////////////////////////////

Logical Arguments with "IF/THEN" (aka "implies" -> )

If it is raining, then I will get wet.
It is raining.

--> What can I conclude? 


I will get wet

How to write with -> symbol?

p: it is raining
q: I will get wet


If it is raining, then I will get wet.

p->q



////////////////////////////////////////////////////////

When we have an "if/then" statement,
and we know that the "if" part is true?

    ...what can we always conclude?


the then part


/////////////////////////////////////////////////////////

If I don't hear my alarm, then I will be late for class.
I am late for class.

--> What can I conclude?


nothing

(we might have been late for other reasons)




/////////////////////////////////////////////////////////

If I don't hear my alarm, then I will be late for class.
I hear my alarm.

--> What can I conclude? 

NOTHING - we might still be late for many other reasons







/////////////////////////////////////////////////////////

If I don't hear my alarm, then I will be late for class.
I'm not late for class.

--> What can I conclude?

They did hear the alarm


IF I don't hear my alarm THEN I will be late for class.

is equivalent to:

IF I am not late for class THEN I heard my alarm

contrapositive


if (condition) {
    statement
}

--> what if we know statement is NOT executed? 



If p Then q

... is equivalent to?


////////////////////////////////////////////////////////

More if/then logic in programming.


if (num < 4 || x >= 10) {

    y = 17;
}

--> suppose y is 17 here. What do we know?

NOTHING- y might have been 17 before


/////////////////////////////////////////////////////////

y = 10;
if (num < 4 || x >= 10) {

    y = 17;
}

--> suppose y is 17 here. Can we conclude anything now?


num < 4 || x >= 10 is true


//////////////////////////////////////////////////////////

if (num < 4 || x >= 10) {

    y = 17;
}

--> suppose y is NOT 17 here. What do we know?

I didn't go in the if statement, so the condition is false.
This means !(num < 4 || x >= 10), or equivalently that
    !(num < 4) && !(x >= 10)
or equivalently that: num >= 4 && x < 10.

Conclusion: we know num >= 4 and x < 10.




///////////////////////////////////////////////////////

Logic puzzles.

The puzzles in this lecture are from or inspired by:
"What is the Name of This Book?", by Raymond Smullyan

///////////////////////////////////////////////////////

The island of Knights and Knaves.
Each inhabitant is either a knight or a knave.

Knights ALWAYS tell the truth, and knaves ALWAYS lie.

///////////////////////////////////////////////////////

Who can say, "I'm a knave"? NOBODY

Can a knight? would be a lie
Can a knave? would be true



//////////////////////////////////////////////////////////

You see two inhabitants, Eve and Fred.

Eve says, "I am a knave or Fred is a knight."



What are Eve and Fred? 

Suppose Eve is a knight. Her statement must be true. The only
way to make her statement true is if Fred is a knight.

Suppose instead that Eve is a knave. Then her statement would
be true (since she is a knave), which isn't possible.

Answer: Eve is a knight, Fred is also a knight


(what does the "or" mean?) inclusive

Her WHOLE statement is the or -- we only need to whole statement
to be true, not each individual piece.


/////////////////////////////////////////////////////////

(We'll do this example on Thursday)

You see two different inhabitants, Ava and Bob.

Ava says that Bob is a knave.
Bob says, "Neither Ava nor I are knaves."

    "Ava is a knight and I am a knight"

What are Ava and Bob?




What does "neither" mean?
    When is Bob's statement true? 
    When is Bob's statement false? 




////////////////////////////////////////////////////////

Attendance/practice quiz in Canvas


///////////////////////////////////////////////////////

Homework 0: due Thursday, January 23
    - get Sireum + GitHub ready (do this now!)
    - post something in Ed Discussion
    - come to office hours or post in Ed Discussion if
        you need software setup help!

Homework 1: due Tuesday, January 28
    - first page of homework is logical reasoning
        (what we did today)
    - second page is logic puzzles

Next: finish logic puzzles, start truth tables