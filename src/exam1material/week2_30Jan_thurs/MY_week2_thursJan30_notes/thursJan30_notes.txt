HW 2 due Tuesday, February 4

--> will be creating 2 image files

--> make sure those are added to your git repository!

////////////////////////////

Today:
- one more parse tree
- begin propositional logic
- equivalent statements
- satisfiability

////////////////////////////////////////

Reminder: parse trees
top level operator: thing done last

Example: p ∨ q ∧ r → ¬p → ¬q ∨ s

not
and
or
implies from right to left
////////////////////////////////////////

Propositional logic.


- a set of *propositional atoms* (statements that can be T/F)
    --> these will be our boolean variables in logic statements
    --> minimal (don't contain any logical operators)



- connected by logical operators



- join together to make new *propositions* (logical sentences)
    that can be true or false



////////////////////////////////////////

Which ones are propositions? Propositional atoms?

Today is Thursday.
    proposition
    propositional atom


What time is it?
    not proposition
    not propositional atom

x == 2
    proposition
    propositional atom

x != 2
    proposition
    not propositional atom (cause of the not)

Pigs can fly.
    proposition
    propositional atom

z != 7 && str.contains(sub)
    proposition
    not propositional atom (cause its not simplified)

Drive carefully.
    not proposition

y <= 4
    proposition
    propositional atom (if you look at the <= as one operation)


I am hungry and thirsty.
    proposition
    not propositional atom


////////////////////////////////////////

Suppose we have these propositional atoms:

    p: It is below freezing.
    q: It is snowing.
    r: y <= 4
    s: x == 2

How would we express these as English sentences?

    ¬p:
    it is not below freezing

    p ∧ q:
    its below freezing and its snowing

    p → q :
    if its below freezing then its snowing

    ¬p → ¬q:
    if its not below freezing then its not snowing


    r ∨ s:
    y <=4 || x == 2

    ¬r:
    y > 4


////////////////////////

Example:

You can't enroll for the course if you haven't taken the prerequisite.


--> what are the propositional atoms?
(don't have negation in the propositional atoms)
p: you can enroll for the course
q: you have taken the prerequisite

--> translate to propositional logic:

!q -> !p

(if you havent taken the prerequisite then you cant enroll for the course)

What is the *contrapositive* of our statement?

p -> q

contrapositive: !p -> !q

/////////////

Example:

if (x <= 2 || y >= 0) {
    if (z != 17) {
        answer = 25;
    }
}

How could we write what our if-statement is doing using propositional logic?

Propositional atoms/translation?

p: x <= 2
q: y >= 0
r: z == 17
s: answer == 25

if all conditions happen, then answer should be 25

(p || q) && !r -> s

//////////////////////////////////

Consider these two statements:

p: I am at least 16 years old
q: I can drive a car


1) If I am at least 16 years old, then I can drive a car.
p -> q

2) I'm not at least 16 years old or I can drive a car.
!p || q



--> how could we translate them to propositional logic statements?




--> are they saying the same thing?




--> could we PROVE it?

the statements are logically equivalent because for each possible input they have the same output 






//////////////////////////////////

DeMorgan's Laws.

...DeMorgan has so many laws...
    these are a couple of them.




if (a == 4 || a == 5) {
    statements
}

How could we express the NEGATION
(i.e., what condition would be true for the "else")?

if (a != 5 && a != 5) 




///

if (a == 4 && b == 5) {
    statements
}

How could we express the NEGATION
(i.e., what condition would be true for the "else")?

if (a != 4 || b != 5){}



//////////////////////////////

DeMorgan's laws in propositional logic:

¬(p ∨ q) is equivalent to... ¬p && ¬q

¬(p ∧ q) is equivalent to... ¬p || ¬q


--> how can we prove the first of DeMorgan's laws?





////////////////////////

Another if-statement example.

'a'

if (Character.isDigit(letter) || num < 10) {
    statements
}

--> how would we negate it without using a ! operator?

Character.isDigit(letter) == false && num >= 10




///////////////////////

And one more. Negate this one:

if ((y >= 4 && num != 14) || x > 0) {
    statements
}

negate it:
!((y >= 4 && num != 14) || x > 0)
!(y >= 4 && num != 14) && !(x > 0)
!(y >= 4 && num != 14) && x <= 0

(y < 4 || num == 14) && x <= 0

///////////////////////

in-class quiz

///////////////////////

Summary of important equivalences (≡ means "is equivalent to").


¬(p ∧ q) ≡ ¬p ∨ ¬q                  (DeMorgan's laws)
¬(p ∨ q) ≡ ¬p ∧ ¬q

p → q ≡                             (contrapositive)
p → q ≡                             (can turn implies into an or)


associative laws
    (2 + 3) + 5 = 2 + (3 + 5)

    (p && q ) && r  vs p && (q && r)



commutative laws



--> you may still be asked to demonstrate these with
    truth tables or prove them with natural deduction (coming soon)


//////////////////////////

Summary of equivalence.

How do we prove two statements ARE equivalent?
Two truth tables, show both statements have same outputs


How do we prove two statements are NOT equivalent?
One truth assignment that have different outputs


//////////////////////////

What is equivalent to:

¬p → q



//////////////////////////

are these equivalent? 

    (p → q) → r
    p → (q → r)

How could we show it?


/////////////////////////

Satisfiability.

- definition: a statement is satisfiable if there exists a truth assignment that makes the statement true


- what kind of statement is satisfiable? what kind is not?
    satisfiable: contingent, tautology
    not satisfiable: contradictory
- is this satisfiable?

    (p ∨ ¬q) ∧ (q ∨ ¬r) ∧ (r ∨ ¬p)

yes, satisfiable

p = T
q = T
r = T

to show not satisfiable, needs full truth table


SAT
straightforward approach to checking all possibilities:




- Aside: P and NP problems

running time programs

can we solve a problem in polynomial time?

can we check a solution to a problem in polynomial time?



////////////////////////

Next time:
- how to prove an argument

